// Code generated by MockGen. DO NOT EDIT.
// Source: store/store.go

// Package mock_store is a generated GoMock package.
package mock_store

import (
	reflect "reflect"
	time "time"

	gin "github.com/gin-gonic/gin"
	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	models "github.com/peternabil/go-api/models"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// CreateCategory mocks base method.
func (m *MockStore) CreateCategory(category *models.Category) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateCategory", category)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateCategory indicates an expected call of CreateCategory.
func (mr *MockStoreMockRecorder) CreateCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateCategory", reflect.TypeOf((*MockStore)(nil).CreateCategory), category)
}

// CreatePriority mocks base method.
func (m *MockStore) CreatePriority(priority *models.Priority) (models.Priority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreatePriority", priority)
	ret0, _ := ret[0].(models.Priority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreatePriority indicates an expected call of CreatePriority.
func (mr *MockStoreMockRecorder) CreatePriority(priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreatePriority", reflect.TypeOf((*MockStore)(nil).CreatePriority), priority)
}

// CreateToken mocks base method.
func (m *MockStore) CreateToken(user models.User) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", user)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken.
func (mr *MockStoreMockRecorder) CreateToken(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockStore)(nil).CreateToken), user)
}

// CreateTransaction mocks base method.
func (m *MockStore) CreateTransaction(transaction *models.Transaction) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTransaction", transaction)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTransaction indicates an expected call of CreateTransaction.
func (mr *MockStoreMockRecorder) CreateTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTransaction", reflect.TypeOf((*MockStore)(nil).CreateTransaction), transaction)
}

// DeleteCategory mocks base method.
func (m *MockStore) DeleteCategory(category *models.Category) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCategory", category)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCategory indicates an expected call of DeleteCategory.
func (mr *MockStoreMockRecorder) DeleteCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCategory", reflect.TypeOf((*MockStore)(nil).DeleteCategory), category)
}

// DeletePriority mocks base method.
func (m *MockStore) DeletePriority(priority *models.Priority) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletePriority", priority)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletePriority indicates an expected call of DeletePriority.
func (mr *MockStoreMockRecorder) DeletePriority(priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletePriority", reflect.TypeOf((*MockStore)(nil).DeletePriority), priority)
}

// DeleteTransaction mocks base method.
func (m *MockStore) DeleteTransaction(transaction *models.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTransaction", transaction)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTransaction indicates an expected call of DeleteTransaction.
func (mr *MockStoreMockRecorder) DeleteTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTransaction", reflect.TypeOf((*MockStore)(nil).DeleteTransaction), transaction)
}

// EditCategory mocks base method.
func (m *MockStore) EditCategory(category *models.Category) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditCategory", category)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditCategory indicates an expected call of EditCategory.
func (mr *MockStoreMockRecorder) EditCategory(category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditCategory", reflect.TypeOf((*MockStore)(nil).EditCategory), category)
}

// EditPriority mocks base method.
func (m *MockStore) EditPriority(priority *models.Priority) (models.Priority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditPriority", priority)
	ret0, _ := ret[0].(models.Priority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditPriority indicates an expected call of EditPriority.
func (mr *MockStoreMockRecorder) EditPriority(priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditPriority", reflect.TypeOf((*MockStore)(nil).EditPriority), priority)
}

// EditTransaction mocks base method.
func (m *MockStore) EditTransaction(transaction *models.Transaction) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditTransaction", transaction)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditTransaction indicates an expected call of EditTransaction.
func (mr *MockStoreMockRecorder) EditTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditTransaction", reflect.TypeOf((*MockStore)(nil).EditTransaction), transaction)
}

// FindUser mocks base method.
func (m *MockStore) FindUser(email string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", email)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockStoreMockRecorder) FindUser(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockStore)(nil).FindUser), email)
}

// GetCategories mocks base method.
func (m *MockStore) GetCategories(id uuid.UUID) ([]models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategories", id)
	ret0, _ := ret[0].([]models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategories indicates an expected call of GetCategories.
func (mr *MockStoreMockRecorder) GetCategories(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategories", reflect.TypeOf((*MockStore)(nil).GetCategories), id)
}

// GetCategory mocks base method.
func (m *MockStore) GetCategory(id uuid.UUID, category *models.Category) (models.Category, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCategory", id, category)
	ret0, _ := ret[0].(models.Category)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCategory indicates an expected call of GetCategory.
func (mr *MockStoreMockRecorder) GetCategory(id, category interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCategory", reflect.TypeOf((*MockStore)(nil).GetCategory), id, category)
}

// GetHighestSpendingCategory mocks base method.
func (m *MockStore) GetHighestSpendingCategory(id uuid.UUID, startDate, endDate time.Time, negative bool) ([]models.SpendingCategory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestSpendingCategory", id, startDate, endDate, negative)
	ret0, _ := ret[0].([]models.SpendingCategory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestSpendingCategory indicates an expected call of GetHighestSpendingCategory.
func (mr *MockStoreMockRecorder) GetHighestSpendingCategory(id, startDate, endDate, negative interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestSpendingCategory", reflect.TypeOf((*MockStore)(nil).GetHighestSpendingCategory), id, startDate, endDate, negative)
}

// GetHighestSpendingPriority mocks base method.
func (m *MockStore) GetHighestSpendingPriority(id uuid.UUID, startDate, endDate time.Time, negative bool) ([]models.SpendingPriority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHighestSpendingPriority", id, startDate, endDate, negative)
	ret0, _ := ret[0].([]models.SpendingPriority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHighestSpendingPriority indicates an expected call of GetHighestSpendingPriority.
func (mr *MockStoreMockRecorder) GetHighestSpendingPriority(id, startDate, endDate, negative interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHighestSpendingPriority", reflect.TypeOf((*MockStore)(nil).GetHighestSpendingPriority), id, startDate, endDate, negative)
}

// GetPriorities mocks base method.
func (m *MockStore) GetPriorities(id uuid.UUID) ([]models.Priority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriorities", id)
	ret0, _ := ret[0].([]models.Priority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriorities indicates an expected call of GetPriorities.
func (mr *MockStoreMockRecorder) GetPriorities(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriorities", reflect.TypeOf((*MockStore)(nil).GetPriorities), id)
}

// GetPriority mocks base method.
func (m *MockStore) GetPriority(id uuid.UUID, priority *models.Priority) (models.Priority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPriority", id, priority)
	ret0, _ := ret[0].(models.Priority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPriority indicates an expected call of GetPriority.
func (mr *MockStoreMockRecorder) GetPriority(id, priority interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPriority", reflect.TypeOf((*MockStore)(nil).GetPriority), id, priority)
}

// GetTransaction mocks base method.
func (m *MockStore) GetTransaction(transaction *models.Transaction) (models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransaction", transaction)
	ret0, _ := ret[0].(models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransaction indicates an expected call of GetTransaction.
func (mr *MockStoreMockRecorder) GetTransaction(transaction interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransaction", reflect.TypeOf((*MockStore)(nil).GetTransaction), transaction)
}

// GetTransactions mocks base method.
func (m *MockStore) GetTransactions(id uuid.UUID, page, pageSize int, count *int64) ([]models.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactions", id, page, pageSize, count)
	ret0, _ := ret[0].([]models.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactions indicates an expected call of GetTransactions.
func (mr *MockStoreMockRecorder) GetTransactions(id, page, pageSize, count interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactions", reflect.TypeOf((*MockStore)(nil).GetTransactions), id, page, pageSize, count)
}

// GetTransactionsDateRangeGroupByDay mocks base method.
func (m *MockStore) GetTransactionsDateRangeGroupByDay(id uuid.UUID, startDate, endDate time.Time, negative bool) ([]models.Spending, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionsDateRangeGroupByDay", id, startDate, endDate, negative)
	ret0, _ := ret[0].([]models.Spending)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionsDateRangeGroupByDay indicates an expected call of GetTransactionsDateRangeGroupByDay.
func (mr *MockStoreMockRecorder) GetTransactionsDateRangeGroupByDay(id, startDate, endDate, negative interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionsDateRangeGroupByDay", reflect.TypeOf((*MockStore)(nil).GetTransactionsDateRangeGroupByDay), id, startDate, endDate, negative)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(user *models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), user)
}

// GetUserFromToken mocks base method.
func (m *MockStore) GetUserFromToken(c *gin.Context) models.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserFromToken", c)
	ret0, _ := ret[0].(models.User)
	return ret0
}

// GetUserFromToken indicates an expected call of GetUserFromToken.
func (mr *MockStoreMockRecorder) GetUserFromToken(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserFromToken", reflect.TypeOf((*MockStore)(nil).GetUserFromToken), c)
}

// GetUsers mocks base method.
func (m *MockStore) GetUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockStoreMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockStore)(nil).GetUsers))
}

// ReadToken mocks base method.
func (m *MockStore) ReadToken(tokenStr string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadToken", tokenStr)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadToken indicates an expected call of ReadToken.
func (mr *MockStoreMockRecorder) ReadToken(tokenStr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadToken", reflect.TypeOf((*MockStore)(nil).ReadToken), tokenStr)
}

// SignUp mocks base method.
func (m *MockStore) SignUp(user *models.User) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockStoreMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockStore)(nil).SignUp), user)
}

// TotalSpending mocks base method.
func (m *MockStore) TotalSpending(id uuid.UUID, startDate, endDate time.Time, negative bool) ([]models.SpendingPriority, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalSpending", id, startDate, endDate, negative)
	ret0, _ := ret[0].([]models.SpendingPriority)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalSpending indicates an expected call of TotalSpending.
func (mr *MockStoreMockRecorder) TotalSpending(id, startDate, endDate, negative interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalSpending", reflect.TypeOf((*MockStore)(nil).TotalSpending), id, startDate, endDate, negative)
}
